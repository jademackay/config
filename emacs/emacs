;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;;(mapc 'package-install ("julia-mode" "nix-mode"))
;; (mapc 'package-install '(nix-mode))
(package-install 'nix-mode)
(package-install 'julia-mode)
(package-install 'markdown-mode)
(package-install 'tangotango-theme)

;;-- delete this block?
;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(column-number-mode t)
;;  '(ecb-options-version "2.40")
;;  '(package-selected-packages (quote (julia-repl markdown-mode)))
;;  '(show-paren-mode t)
;;  '(tool-bar-mode nil))
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(default ((t (:family "Inconsolata for Powerline" :foundry "PfEd" :slant normal :weight normal :height 128 :width normal)))))


;;-- Additions
;;
;; Integrate with gnome clipboard (for copy and paste)
(setq x-select-enable-clipboard t) 

;;-- org-mode
;; The following lines are always needed.  Choose your own keys.
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-agenda-files (list "~/repos/org-mode/Diary.org"
      "~/repos/org-mode/Home.org"
      "~/repos/org-mode/Notes.org"
      "~/repos/org-mode/TODO.org"))

;;-- Place Backup Files in Specific Directory 
;; Enable backup files.                                                         
(setq make-backup-files t)                                                      
;; Enable versioning with default values (keep five last versions, I think!)    
(setq version-control t)                                                        
;; Save all backup file in this directory.                                      
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))            
;; delete old backups silently                                                  
(setq delete-old-versions t)  


;;-- DISABLE TOOLBAR
;; With numeric ARG, display the tool bar if and only if ARG is
;; positive.  Tool bar has icons document (read file), folder (read
;; directory), X (discard buffer), disk (save), disk+pen (save-as),
;; back arrow (undo), scissors (cut), etc.
(tool-bar-mode 0)

;; See http://www.delorie.com/gnu/docs/elisp-manual-21/elisp_620.html
;; and http://www.gnu.org/software/emacs/manual/elisp.pdf
;; from http://www.stokebloke.com/wordpress/2008/04/24/emacs-line-wrapping/
;; disable line wrap
(setq default-truncate-lines t)
;; make side by side buffers function the same as the main window
;;(setq truncate-partial-width-windows nil)
;; Add F12 to toggle line wrap
(global-set-key [f12] 'toggle-truncate-lines)
;; inhibit start up screen
(setq inhibit-startup-screen t)

(global-set-key [f12] 'toggle-truncate-lines)
;; Set the title bar to show file name if available, buffer name otherwise
;;(setq frame-title-format '(buffer-file-name "%f" ("%b")))
;;Include current buffer name in the title bar
  (setq my-hostname 
      (replace-regexp-in-string "\\(^[[:space:]\n]*\\|[[:space:]\n]*$\\)" "" ;; like perl chomp()
        (with-output-to-string 
           (call-process "hostname" nil standard-output nil))))
    (setq my-username (getenv "USERNAME"))
   ;; (setq frame-title-format '("%b - " my-username "@" my-hostname))
    (setq frame-title-format '("%b - " my-hostname))

;; Set the name of the host and current path/file in title bar:
;;(setq frame-title-format
;;     (list (format "%s %%S: %%j "(system-name))
;;	        '(buffer-file-name "%f"(dired-directory dired-directory "%b"))))

;; highlight brackets
(require 'paren)
(show-paren-mode 1)

;; tangotango color theme
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/color-themes")
(load-theme 'tangotango t)

;;(add-to-list 'load-path "~/.emacs.d")    ; This may not be appeared if you have already added.
(add-to-list 'load-path "~/.emacs.d/auto-complete")

;; smlnj
;;(setenv "PATH" (concat "/usr/lib/smlnj/bin:" (getenv "PATH")))
;;(setq exec-path (cons "/usr/lib/smlnj/bin"  exec-path))
(put 'downcase-region 'disabled nil)

;; markdown
(autoload 'markdown-mode "markdown-mode" "Markdown mode" t)
(setq auto-mode-alist (cons '("\\.md\\'" . markdown-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.markdown\\'" . markdown-mode) auto-mode-alist))

;; ;; powerline inconsolata stuff
;;  (setq initial-frame-alist '(
;;    (font . "Monospace-13")
;;  ))
;;  (setq default-frame-alist '(
;;    (font . "Monospace-13")
;;  ))

(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
;; (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
(add-to-list 'auto-mode-alist '("\\.\\(pl\\|pro\\|lgt\\)" . prolog-mode))
(put 'upcase-region 'disabled nil)

;; (add-to-list 'load-path "/home/jade/repos/julia-emacs")
(require 'julia-mode)

;;-- revert all files buffers
(defun revert-all-file-buffers ()
  "Refresh all open file buffers without confirmation.
Buffers in modified (not yet saved) state in emacs will not be reverted. They
will be reverted though if they were modified outside emacs.
Buffers visiting files which do not exist any more or are no longer readable
will be killed."
  (interactive)
  (dolist (buf (buffer-list))
    (let ((filename (buffer-file-name buf)))
      ;; Revert only buffers containing files, which are not modified;
      ;; do not try to revert non-file buffers like *Messages*.
      (when (and filename
                 (not (buffer-modified-p buf)))
        (if (file-readable-p filename)
            ;; If the file exists and is readable, revert the buffer.
            (with-current-buffer buf
              (revert-buffer :ignore-auto :noconfirm :preserve-modes))
          ;; Otherwise, kill the buffer.
          (let (kill-buffer-query-functions) ; No query done when killing buffer
            (kill-buffer buf)
            (message "Killed non-existing/unreadable file buffer: %s" filename))))))
  (message "Finished reverting buffers containing unmodified files."))

(require 'nix-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))

;;(require 'emacs-lisp-mode)
;;(add-to-list 'auto-mode-alist '("\\emacs\\'" . emacs-lisp-mode))

